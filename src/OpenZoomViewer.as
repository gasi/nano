////////////////////////////////////////////////////////////////////////////////////  OpenZoom Nano////  Copyright (c) 2007-2009, Daniel Gasienica <daniel@gasienica.ch>////  OpenZoom is free software: you can redistribute it and/or modify//  it under the terms of the GNU General Public License as published by//  the Free Software Foundation, either version 3 of the License, or//  (at your option) any later version.////  OpenZoom is distributed in the hope that it will be useful,//  but WITHOUT ANY WARRANTY; without even the implied warranty of//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the//  GNU General Public License for more details.////  You should have received a copy of the GNU General Public License//  along with OpenZoom. If not, see <http://www.gnu.org/licenses/>.//////////////////////////////////////////////////////////////////////////////////package{import flash.display.Graphics;import flash.display.Shape;import flash.display.Sprite;import flash.display.StageAlign;import flash.display.StageDisplayState;import flash.display.StageScaleMode;import flash.events.ContextMenuEvent;import flash.events.Event;import flash.events.FullScreenEvent;import flash.events.IOErrorEvent;import flash.events.KeyboardEvent;import flash.events.SecurityErrorEvent;import flash.net.FileReference;import flash.net.URLRequest;import flash.net.navigateToURL;import flash.ui.ContextMenu;import flash.ui.ContextMenuItem;import flash.utils.Dictionary;import flash.utils.setTimeout;import org.openzoom.flash.components.MultiScaleImage;import org.openzoom.flash.components.MultiScaleImageBase;import org.openzoom.flash.descriptors.IImageSourceDescriptor;import org.openzoom.flash.descriptors.IMultiScaleImageDescriptor;import org.openzoom.flash.utils.ExternalMouseWheel;import org.openzoom.flash.viewport.constraints.CenterConstraint;import org.openzoom.flash.viewport.constraints.CompositeConstraint;import org.openzoom.flash.viewport.constraints.ScaleConstraint;import org.openzoom.flash.viewport.constraints.VisibilityConstraint;import org.openzoom.flash.viewport.constraints.ZoomConstraint;import org.openzoom.flash.viewport.controllers.ContextMenuController;import org.openzoom.flash.viewport.controllers.KeyboardController;import org.openzoom.flash.viewport.controllers.MouseController;import org.openzoom.flash.viewport.transformers.TweenerTransformer;import org.openzoom.viewer.assets.Sad;/** * OpenZoom Nano * High-resolution image viewer based on the open source OpenZoom SDK. */[SWF(width="960", height="600", frameRate="60", backgroundColor="#000000")]public class OpenZoomViewer extends Sprite{    //--------------------------------------------------------------------------    //    //  Class constants    //    //--------------------------------------------------------------------------    private static const DEFAULT_LOAD_TIMEOUT:uint = 100    private static const DEFAULT_MAX_SCALE_FACTOR:Number = 1.0    private static const DEFAULT_VISIBILITY_RATIO:Number = 0.5    private static const FULL_SCREEN_KEY_CODE:uint = 70 // F    private static const FULL_SCREEN_BACKGROUND_COLOR:uint = 0x111111    private static const VERSION_MAJOR:uint = 0        private static const VERSION_MINOR:uint = 6    private static const VERSION_BUGFIX:uint = 0    private static const VERSION_BUILD:uint = 0    private static const VERSION:String = [VERSION_MAJOR,                                               VERSION_MINOR,                                           VERSION_BUGFIX,                                           /*VERSION_BUILD*/].join(".")        private static const ABOUT_MENU_CAPTION:String = "About OpenZoom Nano " + VERSION + "..."    private static const ABOUT_MENU_URL:String = "http://openzoom.org/"        private static const DEFAULT_SOURE:String = ""    //--------------------------------------------------------------------------    //    //  Constructor    //    //--------------------------------------------------------------------------    /**     * Constructor.     */    public function OpenZoomViewer()    {        initializeStage()        initializeKeyboardShortcuts()//        addEventListener(Event.ACTIVATE, activateHandler)//        addEventListener(Event.DEACTIVATE, deactivateHandler)        createChildren()        layout()                setTimeout(loadSource, DEFAULT_LOAD_TIMEOUT) // Workaround for FF on Mac OS X    }    //--------------------------------------------------------------------------    //    //  Variables    //    //--------------------------------------------------------------------------    // UI    private var image:MultiScaleImage    private var fullScreenBackground:Shape    private var sad:Sprite    // Context menu    private var aboutMenu:ContextMenuItem    private var versionMenu:ContextMenuItem    private var viewImageMenuDescriptors:Dictionary = new Dictionary()       private var saveAsMenuDescriptors:Dictionary = new Dictionary()        private var activated:Boolean = false    private var imageFile:FileReference    //--------------------------------------------------------------------------    //    //  Methods: Initialization    //    //--------------------------------------------------------------------------    /**     * @private     */    private function initializeStage():void    {        if (stage)        {            // Enable mouse wheel support for            // Mac OS browsers and Safari on Windows            ExternalMouseWheel.initialize(stage)            // Configure stage            stage.align = StageAlign.TOP_LEFT            stage.scaleMode = StageScaleMode.NO_SCALE            stage.addEventListener(Event.RESIZE,                                   stage_resizeHandler,                                   false, 0, true)            stage.addEventListener(FullScreenEvent.FULL_SCREEN,                                   stage_fullScreenHandler,                                   false, 0, true)        }    }    /**     * @private     */    private function initializeKeyboardShortcuts():void    {        stage.addEventListener(KeyboardEvent.KEY_DOWN,                               stage_keyDownHandler,                               false, 0, true)    }    //--------------------------------------------------------------------------    //    //  Methods    //    //--------------------------------------------------------------------------    /**     * @private     */    private function loadSource():void    {        try        {            image.source = getParameter(OpenZoomViewerParameters.SOURCE,                                        DEFAULT_SOURE)        }        catch (error:Error) // Security error        {            showSad()        }    }    //--------------------------------------------------------------------------    //    //  Methods: Children    //    //--------------------------------------------------------------------------    /**     * @private     */    private function createChildren():void    {        if (!fullScreenBackground)            createFullScreenBackground()        if (!sad)            createSad()        if (!image)            createImage()    }    /**     * @private     */    private function createFullScreenBackground():void    {        fullScreenBackground = new Shape()        var g:Graphics = fullScreenBackground.graphics            g.beginFill(0x000000)            g.drawRect(0, 0, 100, 100)            g.endFill()        fullScreenBackground.visible = false        addChild(fullScreenBackground)    }    /**     * @private     */    private function createSad():void    {        sad = new Sad()        sad.visible = false        addChild(sad)    }    /**     * @private     */    private function createImage():void    {        image = new MultiScaleImage()        configureTransformer(image)        configureControllers(image)        configureListeners(image)        addChild(image)    }    //--------------------------------------------------------------------------    //    //  Methods: Image configuration    //    //--------------------------------------------------------------------------    /**     * @private     */    private function configureTransformer(image:MultiScaleImage):void    {        image.transformer = new TweenerTransformer()    }    /**     * @private     */    private function configureControllers(image:MultiScaleImage):void    {        var keyboardController:KeyboardController = new KeyboardController()        var mouseController:MouseController = new MouseController()                var contextMenuController:ContextMenuController        contextMenuController = new ContextMenuController()                contextMenuController.panDown = false        contextMenuController.panUp = false        contextMenuController.panLeft = false        contextMenuController.panRight = false                contextMenuController.zoomIn = false        contextMenuController.zoomOut = false        image.controllers = [mouseController,                             keyboardController,                             contextMenuController]    }    /**     * @private     */    private function configureConstraints(image:MultiScaleImage):void    {        // Prevent image from zooming out        var zoomConstraint:ZoomConstraint = new ZoomConstraint()            zoomConstraint.minZoom = 1        // Center at minimum zoom level        var centerConstraint:CenterConstraint = new CenterConstraint()        // Prevent from zooming in more than the original size of the image        var scaleConstraint:ScaleConstraint = new ScaleConstraint()        var imageWidth:Number        var imageHeight:Number        var defaultDimension:Number = MultiScaleImageBase.DEFAULT_SCENE_DIMENSION        if (image.source && image.source is IMultiScaleImageDescriptor)        {            var descriptor:IMultiScaleImageDescriptor            descriptor = IMultiScaleImageDescriptor(image.source)            imageWidth = descriptor.width            imageHeight = descriptor.height            var maxScale:Number = Math.max(imageWidth / defaultDimension,                                           imageHeight / defaultDimension)            scaleConstraint.maxScale = DEFAULT_MAX_SCALE_FACTOR * maxScale        }        // Prevent image from disappearing from the viewport        var visibilityConstraint:VisibilityConstraint = new VisibilityConstraint()            visibilityConstraint.visibilityRatio = DEFAULT_VISIBILITY_RATIO        // Chain all constraints together        var compositeContraint:CompositeConstraint = new CompositeConstraint()            compositeContraint.constraints = [centerConstraint,                                              visibilityConstraint,                                              zoomConstraint,                                              scaleConstraint,]        // Apply constraints        image.constraint = compositeContraint    }    /**     * @private     */    private function configureListeners(image:MultiScaleImage):void    {        image.addEventListener(Event.COMPLETE,                               image_completeHandler,                               false, 0, true)        image.addEventListener(IOErrorEvent.IO_ERROR,                               image_ioErrorHandler,                               false, 0, true)        image.addEventListener(SecurityErrorEvent.SECURITY_ERROR,                               image_securityErrorHandler,                               false, 0, true)    }    /**     * @private     */    private function addAboutContextMenu(image:MultiScaleImage):void    {        var menu:ContextMenu        if (image.contextMenu && image.contextMenu.customItems)            menu = image.contextMenu        else            menu = new ContextMenu()        menu.hideBuiltInItems()        aboutMenu = new ContextMenuItem(ABOUT_MENU_CAPTION,                                        true /* Separator */)        aboutMenu.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT,                                   aboutMenu_menuItemSelectHandler,                                   false, 0, true)        menu.customItems.push(aboutMenu)            image.contextMenu = menu    }        /**     * @private     */    private function addSourcesContextMenus(image:MultiScaleImage):void    {        var menu:ContextMenu        if (image.contextMenu && image.contextMenu.customItems)            menu = image.contextMenu        else            menu = new ContextMenu()        menu.hideBuiltInItems()            var separator:Boolean = true        var sources:Array = IMultiScaleImageDescriptor(image.source).sources        var descriptor:IImageSourceDescriptor        var name:String        var caption:String            for each (descriptor in sources)        {            name = getDescriptorName(descriptor)            caption = ["View Image ", name].join("")                        var viewImageMenu:ContextMenuItem            viewImageMenu = new ContextMenuItem(caption, separator /* Separator */)            viewImageMenu.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT,                                           viewImageMenu_menuItemSelectHandler,                                           false, 0, true)            menu.customItems.push(viewImageMenu)            viewImageMenuDescriptors[caption] = descriptor                if (separator)                separator = false        }            separator = true            for each (descriptor in sources)        {            var validDownload:Boolean = descriptor.uri.indexOf("http://") == 0 ||                                        descriptor.uri.indexOf("https://") == 0                if (!validDownload)                continue//          name = descriptor.uri.substring(descriptor.uri.lastIndexOf("/") + 1)            name = getDescriptorName(descriptor)            caption = ["Save Image As... ", name].join("")                var saveAsMenu:ContextMenuItem            saveAsMenu = new ContextMenuItem(caption, separator /* Separator */)            saveAsMenu.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT,                                        saveAsMenu_menuItemSelectHandler,                                        false, 0, true)            menu.customItems.push(saveAsMenu)            saveAsMenuDescriptors[caption] = descriptor                if (separator)                separator = false        }    }        private function getDescriptorName(descriptor:IImageSourceDescriptor):String    {        return ["(", descriptor.width, "x", descriptor.height, ")"].join("")    }    //--------------------------------------------------------------------------    //    //  Methods: Layout    //    //--------------------------------------------------------------------------    /**     * @private     */    private function layout():void    {        if (sad)        {            sad.width = stage.stageWidth / 2            sad.height = stage.stageHeight / 2            var scale:Number = Math.min(sad.scaleX, sad.scaleY)            sad.scaleX = sad.scaleY = scale            sad.x = (stage.stageWidth  - sad.width)  / 2            sad.y = (stage.stageHeight - sad.height) / 2        }        if (fullScreenBackground)        {            fullScreenBackground.width = stage.stageWidth            fullScreenBackground.height = stage.stageHeight        }        if (image)            image.setActualSize(stage.stageWidth, stage.stageHeight)    }    //--------------------------------------------------------------------------    //    //  Methods: Internal    //    //--------------------------------------------------------------------------    /**     * @private     */    private function toggleFullScreen():void    {        if (stage.displayState == StageDisplayState.NORMAL)            stage.displayState = StageDisplayState.FULL_SCREEN        else            stage.displayState = StageDisplayState.NORMAL    }    /**     * @private     */    private function showSad():void    {        sad.visible = true    }    //--------------------------------------------------------------------------    //    //  Event handlers    //    //--------------------------------------------------------------------------    /**     * @private     */    private function activateHandler(event:Event):void    {    	if (!activated)    	{	    	loadSource()	    	activated = true	    }    }    /**     * @private     */    private function deactivateHandler(event:Event):void    {    	if (activated)    	   activated = false    }        /**     * @private     */    private function stage_resizeHandler(event:Event):void    {        layout()    }    /**     * @private     */    private function stage_keyDownHandler(event:KeyboardEvent):void    {        if (event.keyCode == FULL_SCREEN_KEY_CODE)            toggleFullScreen()    }    /**     * @private     */    private function stage_fullScreenHandler(event:FullScreenEvent):void    {        if (!fullScreenBackground)            return        if (event.fullScreen)            fullScreenBackground.visible = true        else            fullScreenBackground.visible = false    }    //--------------------------------------------------------------------------    //    //  Event handlers: Image    //    //--------------------------------------------------------------------------    /**     * @private     */    private function image_completeHandler(event:Event):void    {        configureConstraints(image)        addSourcesContextMenus(image)            // Important that this happens after attachment        addAboutContextMenu(image)        layout()    }        /**     * @private     */    private function image_ioErrorHandler(event:IOErrorEvent):void    {        showSad()        layout()    }    /**     * @private     */    private function image_securityErrorHandler(event:SecurityErrorEvent):void    {        showSad()        layout()    }    //--------------------------------------------------------------------------    //    //  Event handlers: Context menu    //    //--------------------------------------------------------------------------    /**     * @private     */    private function aboutMenu_menuItemSelectHandler(event:ContextMenuEvent):void    {        navigateToURL(new URLRequest(ABOUT_MENU_URL), "_blank")    }    /**     * @private     */    private function viewImageMenu_menuItemSelectHandler(event:ContextMenuEvent):void    {        var descriptor:IImageSourceDescriptor        var key:String = (event.currentTarget as ContextMenuItem).caption        descriptor = viewImageMenuDescriptors[key] as IImageSourceDescriptor        if (descriptor)        {            var request:URLRequest = new URLRequest(descriptor.uri)            navigateToURL(request, "_blank")        }    }         /**     * @private     */    private function saveAsMenu_menuItemSelectHandler(event:ContextMenuEvent):void    {        var descriptor:IImageSourceDescriptor        var key:String = (event.currentTarget as ContextMenuItem).caption        descriptor = saveAsMenuDescriptors[key] as IImageSourceDescriptor            if (descriptor)        {            try                {                var request:URLRequest = new URLRequest(descriptor.uri)                imageFile = new FileReference()                var defaultFileName:String = descriptor.uri.substring(descriptor.uri.lastIndexOf("/") + 1)                imageFile.download(request, defaultFileName)            }            catch(error:Error)            {                // Do nothing                }        }    }    //--------------------------------------------------------------------------    //    //  Methods: Parameters    //    //--------------------------------------------------------------------------    /**     * @private     */    private function getParameter(name:String, defaultValue:*):*    {        if (loaderInfo.parameters.hasOwnProperty(name))        {            var value:* = loaderInfo.parameters[name]            return value        }        return defaultValue    }}}